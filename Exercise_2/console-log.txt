E:\classes\udacity\cand-c2-project\Exercise_2>terraform init

Initializing the backend...

Initializing provider plugins...
- Checking for available provider plugins...
- Downloading plugin for provider "aws" (hashicorp/aws) 2.68.0...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.aws: version = "~> 2.68"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

E:\classes\udacity\cand-c2-project\Exercise_2>terraform plan -out exercise-2-apply.out -var-file="..\my_tfvars\access.tfvars"
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # data.aws_lambda_invocation.greet_lambda will be read during apply
  # (config refers to values not yet known)
 <= data "aws_lambda_invocation" "greet_lambda"  {
      + function_name = "greet_lambda"
      + id            = (known after apply)
      + input         = jsonencode(
            {
              + dummy = "data"
            }
        )
      + result        = (known after apply)
      + result_map    = (known after apply)
    }

  # aws_iam_role.greet_lambda will be created
  + resource "aws_iam_role" "greet_lambda" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "greet_lambda"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.aws-lambda-basic-execution-policy will be created
  + resource "aws_iam_role_policy_attachment" "aws-lambda-basic-execution-policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      + role       = "greet_lambda"
    }

  # aws_lambda_function.greet_lambda will be created
  + resource "aws_lambda_function" "greet_lambda" {
      + arn                            = (known after apply)
      + filename                       = "greet_lambda.zip"
      + function_name                  = "greet_lambda"
      + handler                        = "greet_lambda.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.8"
      + source_code_hash               = "u7GYqEm/0TYSkfAZLRgGdC2n+6vcA2ZwElrezeIG9ac="
      + source_code_size               = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "greeting" = "Udacity Greetings"
            }
        }

      + tracing_config {
          + mode = (known after apply)
        }
    }

Plan: 3 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: exercise-2-apply.out

To perform exactly these actions, run the following command to apply:
    terraform apply "exercise-2-apply.out"


E:\classes\udacity\cand-c2-project\Exercise_2>terraform apply -var-file="..\my_tfvars\access.tfvars"

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # data.aws_lambda_invocation.greet_lambda will be read during apply
  # (config refers to values not yet known)
 <= data "aws_lambda_invocation" "greet_lambda"  {
      + function_name = "greet_lambda"
      + id            = (known after apply)
      + input         = jsonencode(
            {
              + dummy = "data"
            }
        )
      + result        = (known after apply)
      + result_map    = (known after apply)
    }

  # aws_iam_role.greet_lambda will be created
  + resource "aws_iam_role" "greet_lambda" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "greet_lambda"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.aws-lambda-basic-execution-policy will be created
  + resource "aws_iam_role_policy_attachment" "aws-lambda-basic-execution-policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      + role       = "greet_lambda"
    }

  # aws_lambda_function.greet_lambda will be created
  + resource "aws_lambda_function" "greet_lambda" {
      + arn                            = (known after apply)
      + filename                       = "greet_lambda.zip"
      + function_name                  = "greet_lambda"
      + handler                        = "greet_lambda.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.8"
      + source_code_hash               = "u7GYqEm/0TYSkfAZLRgGdC2n+6vcA2ZwElrezeIG9ac="
      + source_code_size               = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "greeting" = "Udacity Greetings"
            }
        }

      + tracing_config {
          + mode = (known after apply)
        }
    }

Plan: 3 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_iam_role.greet_lambda: Creating...
aws_iam_role.greet_lambda: Creation complete after 1s [id=greet_lambda]
aws_iam_role_policy_attachment.aws-lambda-basic-execution-policy: Creating...
aws_lambda_function.greet_lambda: Creating...
aws_iam_role_policy_attachment.aws-lambda-basic-execution-policy: Creation complete after 0s [id=greet_lambda-20200630041426173500000001]
aws_lambda_function.greet_lambda: Still creating... [10s elapsed]
aws_lambda_function.greet_lambda: Still creating... [20s elapsed]
aws_lambda_function.greet_lambda: Creation complete after 22s [id=greet_lambda]
data.aws_lambda_invocation.greet_lambda: Refreshing state...

Apply complete! Resources: 3 added, 0 changed, 0 destroyed.

Outputs:

lambda_function_arn = arn:aws:lambda:us-east-1:927337267992:function:greet_lambda
lambda_function_invocation_result = "{\"message\": \"Udacity Greetings from Lambda!\"}"
lambda_function_invoke_arn = arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:927337267992:function:greet_lambda/invocations
lambda_function_last_modified = 2020-06-30T04:14:42.140+0000
lambda_function_qualified_arn = arn:aws:lambda:us-east-1:927337267992:function:greet_lambda
lambda_function_source_code_hash = u7GYqEm/0TYSkfAZLRgGdC2n+6vcA2ZwElrezeIG9ac=
lambda_function_version = $LATEST


E:\classes\udacity\cand-c2-project\Exercise_2>terraform destroy -var-file="..\my_tfvars\access.tfvars"
aws_iam_role.greet_lambda: Refreshing state... [id=greet_lambda]
aws_iam_role_policy_attachment.aws-lambda-basic-execution-policy: Refreshing state... [id=greet_lambda-20200630041426173500000001]
aws_lambda_function.greet_lambda: Refreshing state... [id=greet_lambda]
data.aws_lambda_invocation.greet_lambda: Refreshing state...

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_iam_role.greet_lambda will be destroyed
  - resource "aws_iam_role" "greet_lambda" {
      - arn                   = "arn:aws:iam::927337267992:role/greet_lambda" -> null
      - assume_role_policy    = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "sts:AssumeRole"
                      - Effect    = "Allow"
                      - Principal = {
                          - Service = "lambda.amazonaws.com"
                        }
                      - Sid       = ""
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - create_date           = "2020-06-30T04:14:25Z" -> null
      - force_detach_policies = false -> null
      - id                    = "greet_lambda" -> null
      - max_session_duration  = 3600 -> null
      - name                  = "greet_lambda" -> null
      - path                  = "/" -> null
      - tags                  = {} -> null
      - unique_id             = "AROA5P2M3YMMK26I5TZNI" -> null
    }

  # aws_iam_role_policy_attachment.aws-lambda-basic-execution-policy will be destroyed
  - resource "aws_iam_role_policy_attachment" "aws-lambda-basic-execution-policy" {
      - id         = "greet_lambda-20200630041426173500000001" -> null
      - policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" -> null
      - role       = "greet_lambda" -> null
    }

  # aws_lambda_function.greet_lambda will be destroyed
  - resource "aws_lambda_function" "greet_lambda" {
      - arn                            = "arn:aws:lambda:us-east-1:927337267992:function:greet_lambda" -> null
      - filename                       = "greet_lambda.zip" -> null
      - function_name                  = "greet_lambda" -> null
      - handler                        = "greet_lambda.lambda_handler" -> null
      - id                             = "greet_lambda" -> null
      - invoke_arn                     = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:927337267992:function:greet_lambda/invocations" -> null
      - last_modified                  = "2020-06-30T04:14:42.140+0000" -> null
      - layers                         = [] -> null
      - memory_size                    = 128 -> null
      - publish                        = false -> null
      - qualified_arn                  = "arn:aws:lambda:us-east-1:927337267992:function:greet_lambda:$LATEST" -> null
      - reserved_concurrent_executions = -1 -> null
      - role                           = "arn:aws:iam::927337267992:role/greet_lambda" -> null
      - runtime                        = "python3.8" -> null
      - source_code_hash               = "u7GYqEm/0TYSkfAZLRgGdC2n+6vcA2ZwElrezeIG9ac=" -> null
      - source_code_size               = 389 -> null
      - tags                           = {} -> null
      - timeout                        = 3 -> null
      - version                        = "$LATEST" -> null

      - environment {
          - variables = {
              - "greeting" = "Udacity Greetings"
            } -> null
        }

      - tracing_config {
          - mode = "PassThrough" -> null
        }
    }

Plan: 0 to add, 0 to change, 3 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_iam_role_policy_attachment.aws-lambda-basic-execution-policy: Destroying... [id=greet_lambda-20200630041426173500000001]
aws_lambda_function.greet_lambda: Destroying... [id=greet_lambda]
aws_iam_role_policy_attachment.aws-lambda-basic-execution-policy: Destruction complete after 1s
aws_lambda_function.greet_lambda: Destruction complete after 1s
aws_iam_role.greet_lambda: Destroying... [id=greet_lambda]
aws_iam_role.greet_lambda: Destruction complete after 0s

Destroy complete! Resources: 3 destroyed.

